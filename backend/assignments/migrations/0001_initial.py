# Generated by Django 5.1.5 on 2025-05-01 01:58

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("courses", "0002_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Assignments",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assignment_number", models.SmallIntegerField()),
                ("title", models.TextField()),
                ("due_date", models.DateField()),
                (
                    "lock_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date & time when submissions are locked.",
                        null=True,
                    ),
                ),
                ("pdf_filepath", models.TextField(blank=True, null=True, unique=True)),
                ("has_base_code", models.BooleanField()),
                ("moss_report_directory_path", models.TextField(unique=True)),
                ("bulk_ai_directory_path", models.TextField(unique=True)),
                ("language", models.TextField()),
                ("has_policy", models.BooleanField()),
                (
                    "course_catalog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.coursecatalog",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.semester",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BaseFiles",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file_name", models.TextField()),
                ("file_path", models.TextField(unique=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignments",
                    ),
                ),
            ],
            options={
                "db_table_comment": "Lists base files given to students and used to exclude shared files in MOSS similarity reports.",
            },
        ),
        migrations.CreateModel(
            name="BulkSubmissions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("directory_path", models.TextField(unique=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignments",
                    ),
                ),
                (
                    "course_instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseinstances",
                    ),
                ),
            ],
            options={
                "db_table_comment": "For a given course and assignment, this table stores the directory containing all student submissions.",
            },
        ),
        migrations.CreateModel(
            name="Constraints",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("identifier", models.TextField()),
                ("is_library", models.BooleanField()),
                ("is_keyword", models.BooleanField()),
                ("is_permitted", models.BooleanField()),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignments",
                    ),
                ),
            ],
            options={
                "db_table_comment": "Lists the permitted/banned keywords and libraries of assignments.",
            },
        ),
        migrations.CreateModel(
            name="RequiredSubmissionFiles",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file_name", models.TextField()),
                (
                    "similarity_threshold",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignments",
                    ),
                ),
            ],
            options={
                "db_table_comment": "List of files that students are required to submit to CodeGrade for a given assignment.",
            },
        ),
        migrations.CreateModel(
            name="Submissions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("grade", models.DecimalField(decimal_places=2, max_digits=5)),
                ("created_at", models.DateField(blank=True, null=True)),
                ("flagged", models.BooleanField()),
                (
                    "file_path",
                    models.TextField(
                        db_comment="Relative path from the bulk submission directory.",
                        unique=True,
                    ),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignments",
                    ),
                ),
                (
                    "course_instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseinstances",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.students",
                    ),
                ),
            ],
            options={
                "db_table_comment": "Stores relevant data for individual student submissions.",
            },
        ),
        migrations.CreateModel(
            name="PolicyViolations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("line_number", models.BigIntegerField(blank=True, null=True)),
                (
                    "constraint",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.constraints",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.submissions",
                    ),
                ),
            ],
            options={
                "db_table_comment": "Lists detected instances where a student's submission violates the assignment's constraints.",
            },
        ),
        migrations.AddConstraint(
            model_name="assignments",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("lock_date__isnull", True),
                    ("lock_date__gte", models.F("due_date")),
                    _connector="OR",
                ),
                name="lock_date_after_due_or_null",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="assignments",
            unique_together={("course_catalog", "semester", "assignment_number")},
        ),
        migrations.AlterUniqueTogether(
            name="basefiles",
            unique_together={("assignment", "file_name")},
        ),
        migrations.AlterUniqueTogether(
            name="bulksubmissions",
            unique_together={("course_instance", "assignment")},
        ),
        migrations.AlterUniqueTogether(
            name="requiredsubmissionfiles",
            unique_together={("assignment", "file_name")},
        ),
        migrations.AlterUniqueTogether(
            name="submissions",
            unique_together={("assignment", "student")},
        ),
        migrations.AlterUniqueTogether(
            name="policyviolations",
            unique_together={("submission", "constraint", "line_number")},
        ),
    ]
