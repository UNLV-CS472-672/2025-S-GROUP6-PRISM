# Generated by Django 5.1.5 on 2025-05-01 01:42

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("assignments", "0001_initial"),
        ("courses", "0002_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="LongitudinalCheatingGroups",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="AssignmentReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "mu",
                    models.FloatField(
                        help_text="Population mean of all similarity scores"
                    ),
                ),
                ("sigma", models.FloatField(help_text="Population standard deviation")),
                (
                    "variance",
                    models.FloatField(help_text="Population variance (sigma^2)"),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="assignments.assignments",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CheatingGroups",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cohesion_score", models.FloatField()),
                ("analysis_report_path", models.TextField(unique=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignments",
                    ),
                ),
            ],
            options={
                "db_table_comment": "Recorded cheating groups for a given assignment.",
            },
        ),
        migrations.CreateModel(
            name="CheatingGroupMembers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cluster_distance", models.FloatField()),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.students",
                    ),
                ),
                (
                    "cheating_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cheating.cheatinggroups",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LongitudinalCheatingGroupMembers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_core_member", models.BooleanField()),
                ("appearance_count", models.IntegerField()),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.students",
                    ),
                ),
                (
                    "longitudinal_cheating_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cheating.longitudinalcheatinggroups",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LongitudinalCheatingGroupInstances",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cheating_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cheating.cheatinggroups",
                    ),
                ),
                (
                    "longitudinal_cheating_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cheating.longitudinalcheatinggroups",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubmissionSimilarityPairs",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file_name", models.CharField(max_length=50)),
                ("match_id", models.BigIntegerField()),
                ("percentage", models.IntegerField()),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignments",
                    ),
                ),
                (
                    "submission_id_1",
                    models.ForeignKey(
                        db_column="submission_id_1",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.submissions",
                    ),
                ),
                (
                    "submission_id_2",
                    models.ForeignKey(
                        db_column="submission_id_2",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissionsimilaritypairs_submission_id_2_set",
                        to="assignments.submissions",
                    ),
                ),
            ],
            options={
                "unique_together": {
                    ("submission_id_1", "submission_id_2", "assignment")
                },
            },
        ),
        migrations.CreateModel(
            name="ConfirmedCheaters",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("confirmed_date", models.DateField()),
                ("threshold_used", models.IntegerField()),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignments",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.students",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "assignment")},
            },
        ),
        migrations.CreateModel(
            name="FlaggedStudentPair",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("mean_similarity", models.FloatField()),
                ("max_similarity", models.FloatField()),
                ("mean_z_score", models.FloatField()),
                ("max_z_score", models.FloatField()),
                ("flagged_at", models.DateTimeField(auto_now_add=True)),
                (
                    "course_catalog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.coursecatalog",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.semester",
                    ),
                ),
                (
                    "student_a",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="courses.students",
                    ),
                ),
                (
                    "student_b",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="courses.students",
                    ),
                ),
            ],
            options={
                "unique_together": {
                    ("course_catalog", "semester", "student_a", "student_b")
                },
            },
        ),
        migrations.CreateModel(
            name="PairFlagStat",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assignments_shared", models.PositiveIntegerField(default=0)),
                ("flagged_count", models.PositiveIntegerField(default=0)),
                ("total_similarity", models.FloatField(default=0.0)),
                ("total_z_score", models.FloatField(default=0.0)),
                ("max_z_score", models.FloatField(default=0.0)),
                (
                    "kmeans_label",
                    models.SmallIntegerField(
                        blank=True,
                        help_text="Cluster ID from latest KMeans run",
                        null=True,
                    ),
                ),
                (
                    "course_catalog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.coursecatalog",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.semester",
                    ),
                ),
                (
                    "student_a",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="courses.students",
                    ),
                ),
                (
                    "student_b",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="courses.students",
                    ),
                ),
            ],
            options={
                "unique_together": {
                    ("course_catalog", "semester", "student_a", "student_b")
                },
            },
        ),
        migrations.CreateModel(
            name="StudentReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mean_similarity",
                    models.FloatField(help_text="Student’s sample mean similarity"),
                ),
                (
                    "z_score",
                    models.FloatField(
                        help_text="The student’s z-score of mean similarity"
                    ),
                ),
                (
                    "ci_lower",
                    models.FloatField(
                        help_text="Lower bound of 95% CI for mean similarity"
                    ),
                ),
                (
                    "ci_upper",
                    models.FloatField(
                        help_text="Upper bound of 95% CI for mean similarity"
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_reports",
                        to="cheating.assignmentreport",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        help_text="The student submission referenced",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.submissions",
                    ),
                ),
            ],
            options={
                "ordering": ["-z_score"],
                "indexes": [
                    models.Index(
                        fields=["submission"], name="cheating_st_submiss_8c4884_idx"
                    ),
                    models.Index(
                        fields=["z_score"], name="cheating_st_z_score_8757a1_idx"
                    ),
                    models.Index(
                        fields=["mean_similarity"],
                        name="cheating_st_mean_si_708c80_idx",
                    ),
                ],
                "unique_together": {("report", "submission")},
            },
        ),
        migrations.CreateModel(
            name="StudentSemesterProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "avg_z_score",
                    models.FloatField(
                        help_text="Average of that student's z‑scores across assignments"
                    ),
                ),
                (
                    "max_z_score",
                    models.FloatField(help_text="Maximum single‑assignment z‑score"),
                ),
                (
                    "num_flagged_assignments",
                    models.PositiveIntegerField(
                        help_text="How many assignments where z > threshold"
                    ),
                ),
                (
                    "mean_similarity_variance",
                    models.FloatField(
                        help_text="Population variance of per‑assignment mean similarities"
                    ),
                ),
                (
                    "mean_similarity_skewness",
                    models.FloatField(
                        help_text="Skewness of per‑assignment mean similarities"
                    ),
                ),
                (
                    "mean_similarity_kurtosis",
                    models.FloatField(
                        help_text="Kurtosis of per‑assignment mean similarities"
                    ),
                ),
                (
                    "high_similarity_fraction",
                    models.FloatField(
                        help_text="Fraction of *all* pairwise comparisons > threshold across the semester"
                    ),
                ),
                (
                    "feature_vector",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        help_text="[avg_z, max_z, num_flagged, sim_var, sim_skew, sim_kurt, high_frac]",
                        size=7,
                    ),
                ),
                (
                    "cluster_label",
                    models.IntegerField(
                        blank=True,
                        help_text="Cluster assignment from the latest KMeans run",
                        null=True,
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When these features were last recomputed",
                    ),
                ),
                (
                    "course_catalog",
                    models.ForeignKey(
                        help_text="The course this profile belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.coursecatalog",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        help_text="The semester this profile covers",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.semester",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="Which student these features belong to",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.students",
                    ),
                ),
            ],
            options={
                "ordering": ["-last_updated"],
                "unique_together": {("student", "course_catalog", "semester")},
            },
        ),
        migrations.CreateModel(
            name="FlaggedStudents",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("generative_ai", models.BooleanField()),
                (
                    "professor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.professors",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.students",
                    ),
                ),
                (
                    "similarity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cheating.submissionsimilaritypairs",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "similarity")},
            },
        ),
    ]
