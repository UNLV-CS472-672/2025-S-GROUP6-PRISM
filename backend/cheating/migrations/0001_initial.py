# Generated by Django 5.1.5 on 2025-04-20 23:35

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("assignments", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CheatingGroupMembers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cluster_distance", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="CheatingGroups",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cohesion_score", models.FloatField()),
                ("analysis_report_path", models.TextField(unique=True)),
            ],
            options={
                "db_table_comment": "Recorded cheating groups for a given assignment.",
            },
        ),
        migrations.CreateModel(
            name="ConfirmedCheaters",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("confirmed_date", models.DateField()),
                ("threshold_used", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="FlaggedStudents",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("generative_ai", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="LongitudinalCheatingGroupInstances",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LongitudinalCheatingGroupMembers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_core_member", models.BooleanField()),
                ("appearance_count", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="LongitudinalCheatingGroups",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="StudentReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mean_similarity",
                    models.FloatField(help_text="Student’s sample mean similarity"),
                ),
                (
                    "z_score",
                    models.FloatField(
                        help_text="The student’s z-score of mean similarity"
                    ),
                ),
                (
                    "ci_lower",
                    models.FloatField(
                        help_text="Lower bound of 95% CI for mean similarity"
                    ),
                ),
                (
                    "ci_upper",
                    models.FloatField(
                        help_text="Upper bound of 95% CI for mean similarity"
                    ),
                ),
            ],
            options={
                "ordering": ["-z_score"],
            },
        ),
        migrations.CreateModel(
            name="StudentSemesterProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "avg_z_score",
                    models.FloatField(
                        help_text="Average of that student's z‑scores across assignments"
                    ),
                ),
                (
                    "max_z_score",
                    models.FloatField(help_text="Maximum single‑assignment z‑score"),
                ),
                (
                    "num_flagged_assignments",
                    models.IntegerField(
                        help_text="How many assignments where z > threshold"
                    ),
                ),
                (
                    "mean_similarity_variance",
                    models.FloatField(
                        help_text="Population variance of per‑assignment mean similarities"
                    ),
                ),
                (
                    "mean_similarity_skewness",
                    models.FloatField(
                        help_text="Skewness of per‑assignment mean similarities"
                    ),
                ),
                (
                    "mean_similarity_kurtosis",
                    models.FloatField(
                        help_text="Kurtosis of per‑assignment mean similarities"
                    ),
                ),
                (
                    "high_similarity_fraction",
                    models.FloatField(
                        help_text="Fraction of *all* pairwise comparisons > some threshold (e.g. 50%) across the semester"
                    ),
                ),
                (
                    "assignments_flagged",
                    models.IntegerField(
                        help_text="Number of distinct assignments in which the student was flagged"
                    ),
                ),
                (
                    "feature_vector",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        help_text="Full feature vector for clustering",
                        size=8,
                    ),
                ),
                (
                    "cluster_label",
                    models.IntegerField(
                        blank=True,
                        help_text="Cluster assignment from the latest KMeans run",
                        null=True,
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When these features were last recomputed",
                    ),
                ),
            ],
            options={
                "ordering": ["-last_updated"],
            },
        ),
        migrations.CreateModel(
            name="SubmissionSimilarityPairs",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file_name", models.CharField(max_length=50)),
                ("match_id", models.BigIntegerField()),
                ("percentage", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="AssignmentReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "mu",
                    models.FloatField(
                        help_text="Population mean of all similarity scores"
                    ),
                ),
                ("sigma", models.FloatField(help_text="Population standard deviation")),
                (
                    "variance",
                    models.FloatField(help_text="Population variance (sigma^2)"),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="assignments.assignments",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
