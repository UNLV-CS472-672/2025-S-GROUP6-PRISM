"""
Created by Daniel Levy, 4/21/2025.

This is a class that represents a token generated by the
assembly lexer. This particular token class will include
a TokenType, a lexeme, and a start and end position object.
"""
from code_analysis.asm.asm_token import Position
from code_analysis.asm.asm_token.TokenType import TokenType

class Token:
    """Create object to represent a token."""


    __type = None
    __lexeme = None
    __startPos = None
    __endPos = None

    def __init__(self, type: TokenType, lex: str, start: Position, end: Position):
        """Construct Token object."""
        self.__type = type
        self.__lexeme = lex
        self.__startPos = start
        self.__endPos = end

    ''' This is a getter method to retrieve the token's type. '''
    def getType(self):
        return self.__type

    ''' This is a getter method to retrieve the token's lexeme. '''
    def getLexeme(self):
        return self.__lexeme

    ''' This is a getter method to retrieve the token's start position. '''
    def getStartPos(self):
        return self.__startPos

    ''' This is a getter method to retrieve the token's end position. '''
    def getEndPos(self):
        return self.__endPos
    ''' This is a helper method to print the token out for debugging. '''
    def toString(self):
        return (f"Type = {self.__type.name}, Lexeme = '{self.__lexeme}', "
                f"Location = {self.__startPos.toString()} to {self.__endPos.toString()}")
